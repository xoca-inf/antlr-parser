grammar math;

expr () [int val] -> term() exprS(term0.val) {$val = exprS1.val;};

exprS(int acc) [int val] ->
PLUS term() {$val = acc + term1.val;} exprS($val) {$val = exprS2.val;}
| MINUS term() {$val = acc - term1.val;} exprS($val) {$val = exprS2.val;} | ε {$val = acc;} ;

term () [int val] -> factor() termS(factor0.val) {$val = termS1.val;};

termS (int acc) [int val] ->
MUL factor() {$val = acc * factor1.val;} termS($val) {$val = termS2.val;}
| DIV factor() {$val = acc / factor1.val;} termS($val) {$val = termS2.val;} | ε {$val = acc;} ;

factor () [int val] ->
SIN factor() {$val = (int) Math.sin(factor1.val);}
| COS factor() {$val = (int) Math.cos(factor1.val);}
| FACSUF factor() {$val = 1;
    for (int f = factor1.val; f >= 2; f -= 2)
        $val *= f;
}
| FACUS factor() {$val = 1;
    for (int f = 2; f <= factor1.val; f++)
        $val *= f;
}
| NUM {$val = Integer.parseInt(NUM0);}
| OPEN expr() CLOSE {$val = expr1.val;}
| MINUS factor() {$val = (-1) * factor1.val;};

PLUS: "\\+";
MINUS: "-";
MUL: "\\*";
DIV: "/";
SIN: "sin";
COS: "cos";
FACSUF: "!!";
FACUS: "!";
NUM: "[0-9]+";
OPEN: "\\(";
CLOSE: "\\)";
